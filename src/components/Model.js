/*
This file was generated by https://github.com/pmndrs/gltfjsx and then
customized manually. It uses drei's new useAnimations hook which extracts
all actions and sets up a THREE.AnimationMixer for it so that you don't have to.
All of the assets actions, action-names and clips are available in its output. 
*/

import React, { useContext, useEffect, useRef, useState } from "react"
import { useGLTF, useTexture, useAnimations } from "@react-three/drei"
import Head from "./Head"
import { CanvasContext } from "./Scene"

const HEAD_INIT_POSITION = [1, 1.7, 0.5]

export default function Model(props) {
  // Fetch model and a separate texture
  const { nodes, animations } = useGLTF("/stacy.glb")
  const texture = useTexture("/stacy.jpg")
  // Extract animation actions
  const { ref, actions, names } = useAnimations(animations)
  // Hover and animation-index states
  const [hovered, setHovered] = useState(false)
  const [index, setIndex] = useState(4)
  const headRef = useRef()

  const context = useContext(CanvasContext)

  useEffect(() => {
    if (context.isAttach) {
      headRef.current.position.set(0, -8, 3.4)
      headRef.current.scale.set(125, 125, 125)
      ref.current.children[0].children[0].children[0].children[0].children[0].children[0].children[0].add(
        headRef.current
      )
    } else {
      headRef.current.position.set(
        HEAD_INIT_POSITION[0],
        HEAD_INIT_POSITION[1],
        HEAD_INIT_POSITION[2]
      )
      headRef.current.scale.set(1, 1, 1)
      ref.current.add(headRef.current)
    }
  }, [context])

  // Change cursor on hover-state
  useEffect(
    () => void (document.body.style.cursor = hovered ? "pointer" : "auto"),
    [hovered]
  )
  // Change animation when the index changes
  useEffect(() => {
    // Reset and fade in animation after an index has been changed
    actions[names[index]].reset().fadeIn(0.5).play()
    // In the clean-up phase, fade it out
    return () => actions[names[index]].fadeOut(0.5)
  }, [index, actions, names])
  return (
    <group ref={ref} {...props} dispose={null}>
      <group
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
        onClick={() => setIndex((index + 1) % names.length)}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}>
        <primitive object={nodes.mixamorigHips} />
        <skinnedMesh
          castShadow
          receiveShadow
          geometry={nodes.stacy.geometry}
          skeleton={nodes.stacy.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={[100, 100, 100]}>
          <meshStandardMaterial map={texture} map-flipY={false} skinning />
        </skinnedMesh>
      </group>
      <group ref={headRef} position={HEAD_INIT_POSITION}>
        <Head />
      </group>
    </group>
  )
}
